{"version":3,"sources":["../webpack/bootstrap",".././src/extension.ts",".././src/mdEditor.ts","../external \"vscode\"","../external \"path\"",".././src/util.ts","../external \"fs\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","context","console","log","subscriptions","push","MarkdownEditorProvider","register","vscode","window","registerCustomEditorProvider","viewType","webviewOptions","retainContextWhenHidden","document","webviewPanel","_token","webview","options","enableScripts","html","this","getHtmlForWebview","cdn","asWebviewUri","getVditorDist","toString","linkBase","uri","replace","extConfig","workspace","getConfiguration","imgPathPrefix","image","pathType","dirPath","path","relative","fsPath","changeExtConfigSubscription","onDidChangeConfiguration","e","affectsConfiguration","changeDocumentSubscription","onDidChangeTextDocument","willSaveSubscription","onWillSaveTextDocument","closeDocumentSubscription","onDidCloseTextDocument","onDidDispose","dispose","onDidReceiveMessage","type","updateTextDocument","text","imgName","img","file","imgData","Buffer","from","imgFinalPath","join","fs","writeFile","err","postMessage","assign","getText","theme","imgConfig","scriptUri1","Uri","extensionPath","scriptUri2","styleUri1","styleUri2","getNonce","joinPath","extensionUri","writeData","require","possible","charAt","Math","floor","random","length","Date","now","getTime"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from \"vscode\";\nimport { MarkdownEditorProvider } from \"./mdEditor\";\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  // Use the console to output diagnostic information (console.log) and errors (console.error)\n  // This line of code will only be executed once when your extension is activated\n  console.log('Congratulations, your extension \"vscode-md\" is now active!');\n\n  context.subscriptions.push(MarkdownEditorProvider.register(context));\n}\n","import * as vscode from 'vscode';\r\nimport * as path from 'path';\r\nimport { getNonce } from './util';\r\nimport * as fs from 'fs';\r\nimport { ExtensionConfig, updateScope } from './typing';\r\n\r\nexport class MarkdownEditorProvider implements vscode.CustomTextEditorProvider {\r\n  private static readonly viewType: string = 'myEdit.markdown';\r\n\r\n  public static register(context: vscode.ExtensionContext): vscode.Disposable {\r\n    const providerRegistration = vscode.window.registerCustomEditorProvider(\r\n      MarkdownEditorProvider.viewType,\r\n      new MarkdownEditorProvider(context),\r\n      {\r\n        webviewOptions: {\r\n          retainContextWhenHidden: true\r\n        }\r\n      }\r\n    );\r\n    return providerRegistration;\r\n  }\r\n\r\n  constructor(private readonly context: vscode.ExtensionContext) {}\r\n\r\n  /**\r\n   * Called when our custom editor is opened.\r\n   */\r\n  public async resolveCustomTextEditor(\r\n    document: vscode.TextDocument,\r\n    webviewPanel: vscode.WebviewPanel,\r\n    _token: vscode.CancellationToken\r\n  ): Promise<void> {\r\n    // Setup initial content for the webview\r\n    webviewPanel.webview.options = {\r\n      enableScripts: true\r\n    };\r\n    webviewPanel.webview.html = this.getHtmlForWebview(webviewPanel.webview);\r\n    // const cdn = 'vscode-resource://file//' + this.getVditorDist().path;\r\n    const cdn = webviewPanel.webview.asWebviewUri(this.getVditorDist()).toString();\r\n\r\n    // const linkBase = 'vscode-resource://file//' + document.uri.path.replace(/\\/[^\\/]+?\\.\\w+$/, '/');\r\n    const linkBase = webviewPanel.webview\r\n      .asWebviewUri(document.uri)\r\n      .toString(true)\r\n      .replace(/\\/[^\\/]+?\\.\\w+$/, '/');\r\n\r\n    const extConfig = vscode.workspace.getConfiguration('vscode-md');\r\n\r\n    let imgPathPrefix = '';\r\n    if (extConfig.image.pathType === 'relative') {\r\n      if (extConfig.image.dirPath === '') {\r\n        imgPathPrefix = '.';\r\n      } else {\r\n        imgPathPrefix = path.relative(document.uri.fsPath, extConfig.image.dirPath);\r\n      }\r\n    } else if (extConfig.image.pathType === 'absolute') {\r\n      imgPathPrefix = extConfig.image.dirPath;\r\n    }\r\n    console.log('imgPathPrefix: ' + imgPathPrefix);\r\n\r\n    function updateWebview() {\r\n      webviewPanel.webview.postMessage({\r\n        type: 'all',\r\n        options: Object.assign({ value: document.getText(), cdn: cdn }, extConfig.options),\r\n        linkBase: linkBase,\r\n        theme: extConfig.theme,\r\n        imgConfig: extConfig.image,\r\n        imgPathPrefix\r\n      });\r\n    }\r\n\r\n    const changeExtConfigSubscription = vscode.workspace.onDidChangeConfiguration((e) => {\r\n      if (e.affectsConfiguration('vscode-md.image.pathType') || e.affectsConfiguration('vscode-md.image.dirPath')) {\r\n      }\r\n      if (e.affectsConfiguration('vscode-md.options') || e.affectsConfiguration('vscode-md.theme')) {\r\n      }\r\n      console.log('onDidChangeConfiguration');\r\n    });\r\n\r\n    // Hook up event handlers so that we can synchronize the webview with the text document.\r\n    const changeDocumentSubscription = vscode.workspace.onDidChangeTextDocument((e) => {\r\n      if (e.document.uri.toString() === document.uri.toString()) {\r\n      }\r\n      console.log('onDidChangeTextDocument');\r\n    });\r\n\r\n    const willSaveSubscription = vscode.workspace.onWillSaveTextDocument((e) => {\r\n      console.log('willSaveSubscription');\r\n    });\r\n\r\n    const closeDocumentSubscription = vscode.workspace.onDidCloseTextDocument((e) => {\r\n      console.log('onDidCloseTextDocument');\r\n    });\r\n\r\n    // Make sure we get rid of the listener when our editor is closed.\r\n    webviewPanel.onDidDispose(() => {\r\n      changeDocumentSubscription.dispose();\r\n      changeExtConfigSubscription.dispose();\r\n      willSaveSubscription.dispose();\r\n      closeDocumentSubscription.dispose();\r\n    });\r\n\r\n    //Receive message from the webview.\r\n    webviewPanel.webview.onDidReceiveMessage((e) => {\r\n      switch (e.type) {\r\n        case 'save':\r\n          this.updateTextDocument(document, e.text);\r\n          return;\r\n\r\n        case 'img':\r\n          let imgName = e.imgName;\r\n          const img = e.file;\r\n          const imgData = Buffer.from(img, 'binary');\r\n          let imgFinalPath: string;\r\n          // if (extConfig.image.pathType === 'absolute' || extConfig.image.pathType === 'relative') {\r\n          //   imgFinalPath = `${extConfig.img.dirPath}/${imgName}`;\r\n          // }\r\n          if (extConfig.image.dirPath === '') {\r\n            // imgFinalPath = `${document.uri.fsPath.replace(/\\/[^\\/]+?\\.\\w+$/, '')}/${imgName}`;\r\n            imgFinalPath = path.join(document.uri.fsPath, '..', imgName);\r\n          } else {\r\n            // imgFinalPath = `${extConfig.image.dirPath}/${imgName}`;\r\n            imgFinalPath = path.join(extConfig.image.dirPath, imgName);\r\n          }\r\n          console.log('imgFinalPath: ' + imgFinalPath);\r\n\r\n          fs.writeFile(imgFinalPath, imgData, (err) => {\r\n            if (err) {\r\n              throw err;\r\n            }\r\n          });\r\n\r\n          webviewPanel.webview.postMessage({\r\n            type: 'imgSaved'\r\n          });\r\n          return;\r\n      }\r\n    });\r\n\r\n    updateWebview();\r\n  }\r\n\r\n  /**\r\n   * Get the static html used for the editor webviews.\r\n   */\r\n  private getHtmlForWebview(webview: vscode.Webview): string {\r\n    // Local path to script and css for the webview\r\n\r\n    // TODO: move from media/vditor to node_modules/vditor after  vditor v3.2 released\r\n    const scriptUri1 = webview.asWebviewUri(\r\n      vscode.Uri.file(path.join(this.context.extensionPath, 'media', 'vditor', 'index.min.js'))\r\n    );\r\n\r\n    const scriptUri2 = webview.asWebviewUri(vscode.Uri.file(path.join(this.context.extensionPath, 'media', 'main.js')));\r\n    const styleUri1 = webview.asWebviewUri(\r\n      vscode.Uri.file(path.join(this.context.extensionPath, 'media', 'vditor', 'index.css'))\r\n    );\r\n\r\n    const styleUri2 = webview.asWebviewUri(vscode.Uri.file(path.join(this.context.extensionPath, 'media', 'main.css')));\r\n\r\n    // Use a nonce to whitelist which scripts can be run\r\n    const nonce = getNonce();\r\n\r\n    return /* html */ `\r\n\t\t\t<!DOCTYPE html>\r\n\t\t\t<html lang=\"en\">\r\n\t\t\t<head>\r\n\t\t\t\t<meta charset=\"UTF-8\">\r\n\t\t\t\t<link href=\"${styleUri1}\" rel=\"stylesheet\"/>\r\n\t\t\t\t<link href=\"${styleUri2}\" rel=\"stylesheet\"/>\r\n\t\t\t</head>\r\n      <body>\r\n          <div id=\"loading\"></div>\r\n          <div id=\"vditor\"></div>\r\n\t\t\t\t<script src=\"${scriptUri1}\"></script>\r\n        <script src=\"${scriptUri2}\"></script>\r\n\t\t\t</body>\r\n\t\t\t</html>`;\r\n  }\r\n\r\n  private getVditorDist(): vscode.Uri {\r\n    return vscode.Uri.joinPath(this.context.extensionUri, 'node_modules', 'vditor');\r\n  }\r\n\r\n  /**\r\n   * Write out the markdown to a given document.\r\n   */\r\n  private updateTextDocument(document: vscode.TextDocument, text: string) {\r\n    const writeData = Buffer.from(text, 'utf8');\r\n    return vscode.workspace.fs.writeFile(document.uri, writeData);\r\n  }\r\n}\r\n","module.exports = require(\"vscode\");","module.exports = require(\"path\");","export function getNonce() {\r\n  let text = '';\r\n  const possible =\r\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  for (let i = 0; i < 32; i++) {\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n  }\r\n  return text;\r\n}\r\n\r\nexport function genImgName(): number {\r\n  var date = new Date(Date.now());\r\n  return date.getTime();\r\n}\r\n","module.exports = require(\"fs\");"],"sourceRoot":""}